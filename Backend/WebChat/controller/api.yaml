paths:
  /users:
    get:
      summary: 'Get all users'
      responses:
        200:
          description: 'Successful response'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              data:
                type: 'array'
                items:
                  # Define the structure of a user object here
                  type: 'object'
    post:
      summary: 'Create a new user'
      parameters:
        - name: 'body'
          in: 'body'
          description: 'User information'
          required: true
          schema:
            type: 'object'
            properties:
              username:
                type: 'string'
              email:
                type: 'string'
      responses:
        201:
          description: 'User created successfully'
          schema:
            type: 'object'
            properties:
              userID:
                type: 'integer'
                example: 1
        400:
          description: 'Bad Request'

  /users/{userid}:
    get:
      summary: 'Get user by ID'
      parameters:
        - name: 'userid'
          in: 'path'
          description: 'ID of the user'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'User found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              data:
                # Define the structure of a user object here
                type: 'object'
        404:
          description: 'User not found'

    delete:
      summary: 'Delete user by ID'
      parameters:
        - name: 'userid'
          in: 'path'
          description: 'ID of the user'
          required: true
          type: 'integer'
      responses:
        204:
          description: 'User deleted successfully'
        404:
          description: 'User not found'

    put:
      summary: 'Update user by ID'
      parameters:
        - name: 'userid'
          in: 'path'
          description: 'ID of the user'
          required: true
          type: 'integer'
        - name: 'body'
          in: 'body'
          description: 'Updated user information'
          required: true
          schema:
            type: 'object'
            properties:
              username:
                type: 'string'
              email:
                type: 'string'
      responses:
        200:
          description: 'User updated successfully'
        404:
          description: 'User not found'
        409:
          description: 'Conflict'

paths:
  /tasks:
    get:
      summary: 'Get all tasks'
      responses:
        200:
          description: 'Successful response'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              data:
                type: 'array'
                items:
                  type: 'object'

    post:
      summary: 'Create a new task'
      parameters:
        - name: 'body'
          in: 'body'
          description: 'Task information'
          required: true
          schema:
            type: 'object'
            properties:
              title:
                type: 'string'
              description:
                type: 'string'
              points:
                type: 'integer'
      responses:
        201:
          description: 'Task created successfully'
          schema:
            type: 'object'
            properties:
              taskID:
                type: 'integer'
                example: 1
        400:
          description: 'Bad Request'

  /tasks/{taskID}:
    get:
      summary: 'Get task by ID'
      parameters:
        - name: 'taskID'
          in: 'path'
          description: 'ID of the task'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'Task found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              data:
                # Define the structure of a task object here
                type: 'object'
        404:
          description: 'Task not found'

    delete:
      summary: 'Delete task by ID'
      parameters:
        - name: 'taskID'
          in: 'path'
          description: 'ID of the task'
          required: true
          type: 'integer'
      responses:
        204:
          description: 'Task deleted successfully'
        404:
          description: 'Task not found'

    put:
      summary: 'Update task by ID'
      parameters:
        - name: 'taskID'
          in: 'path'
          description: 'ID of the task'
          required: true
          type: 'integer'
        - name: 'body'
          in: 'body'
          description: 'Updated task information'
          required: true
          schema:
            type: 'object'
            properties:
              title:
                type: 'string'
              description:
                type: 'string'
              points:
                type: 'integer'
      responses:
        200:
          description: 'Task updated successfully'
        404:
          description: 'Task not found'
        409:
          description: 'Conflict'




paths:
  /progress/{progressID}:
    get:
      summary: 'Get task progress by ID'
      parameters:
        - name: 'progressID'
          in: 'path'
          description: 'ID of the task progress'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'Task progress found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              data:
                # Define the structure of a task progress object here
                type: 'object'
        404:
          description: 'Task progress not found'

    delete:
      summary: 'Delete task progress by ID'
      parameters:
        - name: 'progressID'
          in: 'path'
          description: 'ID of the task progress'
          required: true
          type: 'integer'
      responses:
        204:
          description: 'Task progress deleted successfully'
        404:
          description: 'Task progress not found'

  /progress:
    post:
      summary: 'Create new task progress'
      parameters:
        - name: 'body'
          in: 'body'
          description: 'Task progress information'
          required: true
          schema:
            type: 'object'
            properties:
              user_id:
                type: 'integer'
              task_id:
                type: 'integer'
              completion_Date:
                type: 'string'
                format: 'date'  # Add format constraint based on your date representation
              notes:
                type: 'string'
      responses:
        201:
          description: 'Task progress created successfully'
          schema:
            type: 'object'
            properties:
              ProgressID:
                type: 'integer'
                example: 1
        400:
          description: 'Bad Request'

    put:
      summary: 'Update task progress by ID'
      parameters:
        - name: 'progressID'
          in: 'path'
          description: 'ID of the task progress'
          required: true
          type: 'integer'
        - name: 'body'
          in: 'body'
          description: 'Updated task progress information'
          required: true
          schema:
            type: 'object'
            properties:
              notes:
                type: 'string'
      responses:
        200:
          description: 'Task progress updated successfully'
        404:
          description: 'Task progress not found'
        409:
          description: 'Conflict'
